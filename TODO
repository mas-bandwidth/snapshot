DONE

	Import basic platform files

	Get compiling with premake and stub test.cpp

	Prefix all files with snapshot_

	Setup snapshot.h with definitions needed by all files (eg. platform detection, endianness, asserts etc...)

	Get snapshot_crypto.h/cpp compiling

	Get snapshot_address.h in

	Setup snapshot_platform.h so there is one header interface for platform functions

	Implement snapshot.cpp so we can init and term the library

	Setup snapshot_address.cpp

	Hack up snapshot_assert

	Hack up snapshot_printf

	Hack up snapshot_malloc/free

	Get mac platform cpp fully compiling and linking

	Clean up pass to make sure what's there doesn't suck

	Fix up linux platform

	Drop the other platforms for now. They can be brought back later easily.

	Fix windows platform

	Bring across basic tests for time, address.

	Bring across simple read/write methods.

	Bring across bitpacker.

	Bring across stream.

	Bring across crypto tests.

	Bring across tests for sockets.

	Bring across tests for thread.

	Bring across tests for mutex.

	Verify tests pass on mac.

TODO

	Update license to include netcode.io source code

	Incorporate netcode server as snapshot_server_t

	Incorporate netcode client as snapshot_client_t

	Create a client.cpp and server.cpp and add to makefile

	Get the client successfully connecting to the server and exchanging packets

	---------------------------

	Incorporate reliable.io source code

	Update license to include netcode.io source code

	Integrate reliable so we have packet fragmentation and re-assembly, and sequence numbers and acks.

	---------------------------

	Verify tests pass on linux.

	Verify tests pass on windows.

	---------------------------	

	Now think what are the essential other things?

	A command channel with messages, bidirectional between client and server. For sure.

	The same command channel with in-line large blocks of data sent down (eg. snapshot baselines...)

	Unreliable messages stuck at the back of the packets (when there is room).

	Choke.

	Server loop w. tick rate.

	Server sim objects step forward together.

	Player commands with input and dt sent redundantly all unacked.

	Schema

	What sort of properties are needed?

	Send uncompressed snapshots down.

	---------------------------
