DONE

	Bring across connect token into snapshot_connect_token.h

	Find corresponding snapshot_crypto_ function to replace "_bignonce"

	Get "test_connect_token" compiling and passing

	Bring across public and private connect token tests

	Bring across challenge token test

	Bring across packet types and tests

	Get packet type tests passing

	Stop and clean up. Especially, work out if we want to pass allocators into the read/write packets.

	Bring across encryption manager

	Bring across replay protection

	Bring across netcode client as snapshot_client.cpp

	Update snapshot_read_packet so it doesn't allocate or copy payload packet data

	Update snapshot_client.cpp so it uses the new snapshot read packet stuff

	Implement a zero copy process payload in place.

TODO

	Calculate the allowed packets once on create

	Bring back the buffers needed for receiving packets from simulator

	Get snapshot_client.cpp network simulator receive packets code back up

	-------------

	Work out how to prefix the packet data with the payload packet struct, eg. need offset_of(member)?

	Work out how to create payload packets, so they can be sent on the wire, zero copy as well. This means allocating the payload packet with prefix bytes (256?) so we can stash the packet header prior to the payload data.

	Get the payload packet test working

	Make sure the snapshot client can send, receive and process payload packets, zero copy and alloc.

	-------------

	Bring across netcode server as snapshot_server_t

	-------------

	Create a client.cpp and server.cpp and add to makefile

	Get the client successfully connecting to the server and exchanging packets

	-------------






























	---------------------------

	Incorporate reliable.io source code

	Update license to include netcode.io source code

	Integrate reliable so we have packet fragmentation and re-assembly, and sequence numbers and acks.

	---------------------------

	Verify tests pass on linux.

	Verify tests pass on windows.

	---------------------------	

	Now think what are the essential other things?

	A reliable-ordered channel with messages, bidirectional between client and server. For sure.

	The same command channel with in-line large blocks of data sent down (eg. snapshot baselines...)

	Unreliable messages stuck at the back of the packets (when there is room) for sound effects, visual fx etc...

	Choke.

	Server loop w. tick rate.

	Server sim objects step forward together.

	Player commands with input and dt sent redundantly all unacked.

	Schema

	What sort of properties are needed?

	Send uncompressed snapshots down.

	Send delta compressed snapshots down.

	---------------------------
