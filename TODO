DONE

	Fix payload packet issue with loopback. For example, we don't really want to encrypt/decrypt with loopback...

	Setup client so it processes payload packets from the server.

TODO

	Bring back endpoint tests with updates for the new functions.

	Standardize the generate/verify packets to the existing functions (move these functions into snapshot_packets.h/cpp?)

	Make sure all endpoint tests pass.

	-------------

	Add back #define SNAPSHOT_DEVELOPMENT 1 into premake file

	Wrap the network simulator stuff with #if SNAPSHOT_DEVELOPMENT

	Add some new client and server flags, for the "VALIDATE_PAYLOAD"

	Create some tests where these flags get turned on, wrapped with #if SNAPSHOT_DEVELOPMENT

	Make sure tests are wrapped with #if SNAPSHOT_DEVELOPMENT

	-------------

	Extend client and server to generate range of valid payload packet sizes, with contents that are fully verifiable (using new functions in snapshot_packets.h)

	Verify payload received on client.

	Verify payload received on server.

	-------------

	Implement a test for payload packets, ipv4, ipv6 and loopback.

	-------------



























	=========================

	Download UE5.

	Setup a snapshot UE5 plugin based on the network next UE4 plugin.

	Verify client and server can connect and operate in testbed.

	-------------

	Update to latest PS4/PS5 tooling

	Update to latest XBox Series X and GDK tooling

	Get series x testbed working

	Update to latest Nintendo Switch tooling

	-------------

	Setup additional PCs as build farm for sem

	-------------

	*** FIRST MILESTONE: SnapshotNetDriver in UE5, working on PC and PS5 ***

	-------------

	Now think what are the essential other things?

	A reliable-ordered channel with messages, bidirectional between client and server. For sure.

	The same command channel with in-line large blocks of data sent down (eg. snapshot baselines...)

	Unreliable messages stuck at the back of the packets (when there is room) for sound effects, visual fx etc...

	Player commands with input and dt sent redundantly all unacked.

	Choke.

	*** SECOND MILESTONE: Low-level protocol is complete ***

	---------------------------

	Schema

	What sort of properties are needed?

	Send delta compressed snapshots down.

	Decompress snapshot deltas on client.

	Drive object creates and deletes.

	---------------------------

	Slothy input:

		1. Uncompressed snapshots probably won't work, players are remote working not LAN

		2. Concerns around disruptive integration, how exactly does it integrate?

		3. How do we tell when object properties have changed? <----- call function when changed?

		4. Separation of client/server instances of engine objects seems like a heavy lift

		5. How do UE5 objects work?

	---------------------------
