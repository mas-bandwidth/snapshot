DONE

	Integrate endpoint with client.

	Setup client to start sending payload packets regularly.

	Work out how to get endpoint zero copy on write.

	Rework endpoint so it doesn't operate via callbacks... gross.

	Debug what's going wrong with payload packet send, breaking connect.

	It was just a logic error last time ackets sent. Fixed by only using that last time packet sent var for internal packets.

	Extend endpoint so it performs fragmented send.

	Integrate endpoint with server.

	Need to rethink how the fragmentation and reassembly is working with the protocol.

	Right now the idea seems to be that fragmentation would only apply to the payload packet.

	The code I'm working with however was running the fragmentation across all packet types, will need to make adjustments here.

	Setup server to process payload packets from client.

	Why aren't fragments getting through on server? Fixed. Bad logic in endpoint fragmented send.

	Implement method for endpoint to process packets, and return (out of band) whole packets for the client to process (post fragment...)

	Extend server process payload to take payload sequence (uint16_t), and to return SNAPSHOT_OK on successful processing, SNAPSHOT_ERROR on fail.

	Implement method to mark payload packet successfully processed (for acks) in endpoint.

TODO

	Setup server so it sends payload packets down to each client each time it is updated.

	-------------

	Setup client so it processes payload packets from the server.

	-------------

	Bring back endpoint tests with updates for the new functions.

	-------------

	Implement a test that verifies we get payload packets exchanged between client and server.

	-------------

	Test that large fragmented packets get exchanged between client and server.

	-------------

	Test that payload and passthrough packets work with loopback.

	-------------



























	=========================

	Download UE5.

	Setup a snapshot UE5 plugin based on the network next UE4 plugin.

	Verify client and server can connect and operate in testbed.

	-------------

	Update to latest PS4/PS5 tooling

	Update to latest XBox Series X and GDK tooling

	Get series x testbed working

	Update to latest Nintendo Switch tooling

	-------------

	Setup additional PCs as build farm for sem

	-------------

	*** FIRST MILESTONE: SnapshotNetDriver in UE5, working on PC and PS5 ***

	-------------

	Now think what are the essential other things?

	A reliable-ordered channel with messages, bidirectional between client and server. For sure.

	The same command channel with in-line large blocks of data sent down (eg. snapshot baselines...)

	Unreliable messages stuck at the back of the packets (when there is room) for sound effects, visual fx etc...

	Player commands with input and dt sent redundantly all unacked.

	Choke.

	*** SECOND MILESTONE: Low-level protocol is complete ***

	---------------------------

	Schema

	What sort of properties are needed?

	Send delta compressed snapshots down.

	Decompress snapshot deltas on client.

	Drive object creates and deletes.

	---------------------------

	Slothy input:

		1. Uncompressed snapshots probably won't work, players are remote working not LAN

		2. Concerns around disruptive integration, how exactly does it integrate?

		3. How do we tell when object properties have changed? <----- call function when changed?

		4. Separation of client/server instances of engine objects seems like a heavy lift

		5. How do UE5 objects work?

	---------------------------
