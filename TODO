DONE

	Add back #define SNAPSHOT_DEVELOPMENT 1 into premake file

	Wrap the tests with #if SNAPSHOT_DEVELOPMENT

	Wrap the network simulator stuff with #if SNAPSHOT_DEVELOPMENT

	Add some client and server development flags, wrapped with #if SNAPSHOT_DEVELOPMENT

	First flag is DEVELOPMENT_FLAG_VALIDATE_PAYLOAD

TODO

	-------------

	Move generate_packet_data / validate_packet_data functions into snapshot_packets.h / cppp

	-------------

	Extend client and server to generate and send test payloads with the new generate_packet_data function, #if SNAPSHOT_DEVELOPMENT and the flag validate payload is set.

	Payloads should be a range of sizes, from minimum (1 byte payload) to maximum size (with fragmentation and reassembly.)

	Both client and server should validate payloads received, if the development flag is set.

	-------------

	Implement tests where this development flag is set on client and server.

		test_ipv4_client_server_payload
		test_ipv4_client_server_payload
		test_ipv4_client_server_payload

	-------------

	Client should really have a protocol id that is validated against server and connect token on join?

	-------------


























	=========================

	Download UE5.

	Setup a snapshot UE5 plugin based on the network next UE4 plugin.

	Verify client and server can connect and operate in testbed.

	-------------

	Update to latest PS4/PS5 tooling

	Update to latest XBox Series X and GDK tooling

	Get series x testbed working

	Update to latest Nintendo Switch tooling

	-------------

	Setup additional PCs as build farm for sem

	-------------

	*** FIRST MILESTONE: SnapshotNetDriver in UE5, working on PC and PS5 ***





























	-------------

	Now think what are the essential other things?

	A reliable-ordered channel with messages, bidirectional between client and server. For sure.

	The same command channel with in-line large blocks of data sent down (eg. snapshot baselines...)

	Unreliable messages stuck at the back of the packets (when there is room) for sound effects, visual fx etc...

	Player commands with input and dt sent redundantly all unacked.

	Choke.

	*** SECOND MILESTONE: Low-level protocol is complete ***

	---------------------------

	Schema

	What sort of properties are needed?

	Send delta compressed snapshots down.

	Decompress snapshot deltas on client.

	Drive object creates and deletes.

	---------------------------

	Slothy input:

		1. Uncompressed snapshots probably won't work, players are remote working not LAN

		2. Concerns around disruptive integration, how exactly does it integrate?

		3. How do we tell when object properties have changed? <----- call function when changed?

		4. Separation of client/server instances of engine objects seems like a heavy lift

		5. How do UE5 objects work?

	---------------------------
